generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl"]
  previewFeatures = ["fullTextIndex", "fullTextSearch", "metrics"]
  output          = "./src/generated/client"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../../docs/images/mongo-erd.svg"
  theme    = "dark"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_DATABASE_URL")
}

enum MovieType {
  ANIMATED_SERIES // Мульт-сериал
  ANIME // Аниме
  CARTOON // Мультфильм
  MINI_SERIES // Мини-сериал
  MOVIE // Фильм
  TV_SERIES // Сериал
  TV_SHOW // ТВ-Шоу
  VIDEO // Видео
}

// Person enums
enum ProfessionType {
  ACTOR // Актер
  NOT_LISTED_IN_THE_CREDITS // В титрах не указаны
  BAND_CHRONICLE // Группа: Хроника
  BAND_PLAYING_THEMSELVES // Группа: играют самих себя
  DIRECTOR // Режиссер
  COMPOSER // Композитор
  EDITOR // Монтажер
  VOICE_DIRECTOR // Звукорежиссер
  OPERATOR // Оператор
  TRANSLATOR // Переводчик
  PRODUCER // Продюсер
  WRITER // Сценарист
  PRODUCTION_DESIGNER // Художник-постановщик
  PRODUCER_USSR // Продюссер СССР
}

enum PersonSex {
  MALE // Мужской
  FEMALE // Женский
}

// Movie types
type MovieNameItem {
  name String
}

type MovieExternalId {
  imdb String?
  tmdb Int?
  kpHD String?
}

type MovieRating {
  kp                 Float?
  imdb               Float?
  await              Float?
  filmCritics        Float?
  russianFilmCritics Float?
  tmdb               Float?
}

// Person types
model Person {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  kpId        Int              @unique
  // String properties
  enName      String?
  name        String?
  sex         PersonSex?
  // Int properties
  age         Int?
  countAwards Int?
  growth      Int?
  // Enum properties
  profession  ProfessionType[]
  // Date proprties
  birthday    DateTime?        @db.Date
  death       DateTime?        @db.Date
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  // Relations
  movies      MovieOnPerson[]
}

model MovieOnPerson {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  kpId       Int              @unique
  movieKpId  Int
  // Enum properties
  profession ProfessionType[]
  // Date proprties
  assignedAt DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  // Relations
  movie      Movie            @relation(fields: [movieId], references: [id])
  movieId    String           @db.ObjectId
  person     Person           @relation(fields: [personId], references: [id])
  personId   String           @db.ObjectId
}

model Movie {
  // Id properties
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  kpId        Int              @unique
  externalId  MovieExternalId?
  // String properties
  name        String?
  names       String[]
  enName      String?
  description String?
  //Int properties
  year        Int?
  // Enum properties
  type        MovieType?
  genres      MovieNameItem[]
  // Type properties
  rating      MovieRating

  // Date proprties
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  // Relations
  persons   MovieOnPerson[]
}
